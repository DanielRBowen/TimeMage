<button type="button" @onclick="OpenNewTimerModal"><span class="oi oi-plus" aria-hidden="true"></span></button>
<button type="button" class="btn btn-outline-primary" @onclick="() => OnDone.InvokeAsync(true)">Done</button>
<input type="text" class="form-control m-3" aria-label="Name" @bind-value="IntervalSet.Name" placeholder="Name">

@if (IntervalSet.Intervals.Any())
{
    foreach (TmTimer interval in IntervalSet.Intervals)
    {
        <TimerItem Timer="interval" IsEditing="true" OnDuplicate="Duplicate" OnDelete="Delete"></TimerItem>
    }
}
else
{
    <div>There are no intervals to display.</div>
}

<BSModal @ref="_newTimerModal">
    <Content>
        <form>
            <div class="form-group">
                <input type="text" class="form-control" aria-label="Name" @bind-value="_newTimer.Name" placeholder="Name" maxlength="34">
                <TimeMageTimeSelector @bind-SelectedTime="_newTimer.Time"></TimeMageTimeSelector>
			</div>
		</form>

	</Content>
    <Footer>
        <BSButton Color="BSColor.Light" @onclick="Add">Add</BSButton>
	</Footer>
</BSModal>

@code {
    [Parameter]
    public IntervalSet IntervalSet { get; set; }

    [Parameter]
    public EventCallback<bool> OnDone { get; set; }

    private BSModal _newTimerModal;

    private TmTimer _newTimer = new TmTimer { Name = "Mountain Climbers", Time = new TimeSpan(0, 0, 10) };

    protected override void OnInitialized()
    {
        IntervalSet.Stop();
    }

    public void Add()
    {
        IntervalSet.Intervals.Add(_newTimer);
        _newTimerModal.HideAsync();
    }

    public void Delete(TmTimer interval)
    {
        IntervalSet.Intervals.Remove(interval);
    }

    public void Duplicate(TmTimer interval)
    {
        IntervalSet.Intervals.Add(new TmTimer { Name = interval.Name, Time = interval.Time });
    }

    private void OpenNewTimerModal()
    {
        _newTimer = new TmTimer { Name = "Mountain Climbers", Time = new TimeSpan(0, 0, 10) };
        _newTimerModal.ShowAsync();
    }
}