@page "/intervaltimers"
@inject TimeMageState TimeMageState

@if (isEditing)
{
    <EditIntervalSet IntervalSet="EditIntervalSet" OnDone="DoneEdit"></EditIntervalSet>

}
else if (isCurrentIntervalDisplayed)
{
    <CurrentIntervalSet IntervalSet="CurrentIntervalSet" OnClose="CloseCurrent"></CurrentIntervalSet>
}
else
{
    <button type="button" @onclick="Add"><span class="oi oi-plus" aria-hidden="true"></span></button>

    <div class="text-center justify-content-center">
        @if (IntervalSets.Any())
        {
            @foreach (IntervalSet intervalSet in IntervalSets)
            {
                <div class="row text-center d-flex justify-content-center">
                    <div class="col-3">@intervalSet.Name</div>
                    @if (CurrentIntervalSet == null || CurrentIntervalSet?.IsTimerRunning == false)
                    {
                        <div class="col-3">
                            <button type="button" class="btn btn-outline-success" @onclick="() => { isEditing = !isEditing; EditIntervalSet = intervalSet; }">
                                <span class="oi oi-pencil" aria-hidden="true"></span>
                            </button>
                        </div>
                    }
                    <div class="col-3">
                        <button type="button" class="btn btn-outline-danger" @onclick="() => Delete(intervalSet)">
                            <span class="oi oi-trash" aria-hidden="true"></span>
                        </button>
                    </div>
                    <div class="col-3">
                        <button type="button" class="btn-outline-primary" @onclick="() => { isCurrentIntervalDisplayed = !isCurrentIntervalDisplayed; CurrentIntervalSet = intervalSet; }">
                            <span class="oi oi-media-play" aria-hidden="true"></span>
                        </button>
                    </div>
                </div>
            }
        }
        else
        {
            <div>There are no Interval sets</div>
        }
    </div>
}

@code {
    bool isEditing = false;

    bool isCurrentIntervalDisplayed = false;

    public List<IntervalSet> IntervalSets => TimeMageState.IntervalSets;

    private IntervalSet EditIntervalSet;

    private IntervalSet CurrentIntervalSet;

    protected override void OnInitialized()
    {
        if (IntervalSets.Any(intervalSet => intervalSet.Name == "Fat Burn") == false)
        {
            IntervalSets.Add(PreloadedIntervalSets.FatBurn);
        }
    }

    public void Add()
    {
        IntervalSets.Add(new IntervalSet());
    }

    public void DoneEdit(bool done)
    {
        isEditing = !done;
    }

    public void CloseCurrent(bool closed)
    {
        isCurrentIntervalDisplayed = !closed;
    }

    public void Delete(IntervalSet intervalSet)
    {
        IntervalSets.Remove(intervalSet);
    }
}
