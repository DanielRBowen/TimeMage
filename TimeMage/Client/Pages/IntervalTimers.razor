@page "/intervaltimers"
@inject TimeMageState TimeMageState

<h1>Interval Timers</h1>

@if (isEditing)
{
    <EditIntervalSet IntervalSet="EditIntervalSet" OnDone="DoneEdit"></EditIntervalSet>

}
else if(isCurrentIntervalDisplayed)
{
    <CurrentIntervalSet IntervalSet="CurrentIntervalSet" OnClose="CloseCurrent"></CurrentIntervalSet>
}
else
{
    <button type="button" @onclick="Add"><span class="oi oi-plus" aria-hidden="true"></span></button>

    @if (IntervalSets.Any())
    {
        <table>
            <tbody>
                @foreach (IntervalSet intervalSet in IntervalSets)
                {
                    <tr>
                        <td>@intervalSet.Name</td>
                        <td>
                            <span class="oi oi-pencil pointer" aria-hidden="true" @onclick="() => { isEditing = !isEditing; EditIntervalSet = intervalSet; }"></span>
                        </td>
                        <td>
                            <span class="oi oi-media-play pointer" aria-hidden="true" @onclick="() => { isCurrentIntervalDisplayed = !isCurrentIntervalDisplayed; CurrentIntervalSet = intervalSet; }"></span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div>There are no Interval sets</div>
    }
}


@code {
    bool isEditing = false;

    bool isCurrentIntervalDisplayed = false;

    public List<IntervalSet> IntervalSets => TimeMageState.IntervalSets;

    private IntervalSet EditIntervalSet;

    private IntervalSet CurrentIntervalSet;

    public void Add()
    {
        IntervalSets.Add(new IntervalSet());
    }

    public void DoneEdit(bool done)
    {
        isEditing = !done;
    }

    public void CloseCurrent(bool closed)
    {
        isCurrentIntervalDisplayed = !closed;
    }
}
