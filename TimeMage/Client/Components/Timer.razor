@using System.Diagnostics;
<tr>
    <td>
        <span class="oi oi-document" aria-hidden="true" @onclick="() => DuplicateCallback.InvokeAsync(this)"></span>
    </td>
    <td>
        <span class="oi oi-trash" aria-hidden="true" @onclick="() => DeleteCallback.InvokeAsync(this)"></span>
    </td>
    <td>
        <input type="text" class="form-control" aria-label="Name" @bind-value="Name" placeholder="Name">

    </td>
    @if (_timerRunning)
    {
        <td class="mx-3">@_timeLeft</td>
    }
    else
    {
        <td><input type="text" class="form-control" aria-label="Time" @bind-value="Time"></td>
    }
    <td>
        @if (_timerRunning)
        {
            <span class="oi oi-media-stop m-2" aria-hidden="true" @onclick="StopTimer"></span>
        }
        else
        {
            <span class="oi oi-media-play m-2" aria-hidden="true" @onclick="StartTimer"></span>
        }
    </td>
</tr>

@code {
    private bool _timerRunning = false;
    [Parameter]
    public string Name { get; set; } = "Timer";
    [Parameter]
    public TimeSpan Time { get; set; } = new TimeSpan(0, 5, 0);
    private TimeSpan _timeLeft = new TimeSpan(0, 0, 15);
    [Parameter]
    public EventCallback<Timer> DeleteCallback { get; set; }
    [Parameter]
    public EventCallback<Timer> DuplicateCallback { get; set; }

    public void StartTimer()
    {
        Task.Run(() => RunTimer());
    }

    async Task RunTimer()
    {
        if (Time.TotalSeconds <= 0)
        {
            return;
        }

        _timeLeft = Time;
        _timerRunning = true;
        while (_timeLeft > new TimeSpan() && _timerRunning == true)
        {
            await Task.Delay(1000);
            _timeLeft = _timeLeft.Subtract(new TimeSpan(0, 0, 1));
            StateHasChanged();
        }
        await AfterTime();
        StateHasChanged();
    }

    public void StopTimer()
    {
        _timerRunning = false;
    }

    Task AfterTime()
    {
        if (_timerRunning)
        {
            // play sound;
        }
        else
        {

        }

        return Task.CompletedTask;
    }


}
