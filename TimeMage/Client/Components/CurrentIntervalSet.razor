@using BlazorAudioPlayer.Models
@inject IJSRuntime JS
@inject SpeechToTextClient SpeechToTextClient
@inject PreloadedIntervalSetsClient PreloadedIntervalSetsClient

<button type="button" class="btn btn-outline-primary" @onclick="() => Close()">Close</button>

@if (_isLoading)
{
    <div class="loading-bar"></div>
}
else
{
    <div class="text-center justify-content-center">
        <div class="row"><h5 class="col-12">@IntervalSet.Name</h5></div>

        @if (IntervalSet.IsTimerRunning)
        {

            <h2 class="@singleColumnCenter">Time: @IntervalSet.TotalTimeLeft</h2>

            <h5 class="@singleColumnCenter">Current Interval: @IntervalSet.CurrentIntervalName</h5>

            <h3 class="@singleColumnCenter">Interval Time Left: @IntervalSet.CurrentTimerLeft</h3>

            @if (IntervalSet.IsPaused)
            {
                <button type="button" class="@singleColumnCenter btn btn-outline-danger" @onclick="() => IntervalSet.UnPause()">
                    <span class="oi oi-media-play m-2 pointer" aria-hidden="true"></span>
                </button>

                <div class="my-5"></div>
                <div class="my-5"></div>

                <button type="button" class="@singleColumnCenter btn btn-outline-danger" @onclick="async() => await Stop()">
                    <span class="oi oi-media-stop m-2 pointer" aria-hidden="true"></span>
                </button>
            }
            else
            {
                <button type="button" class="@singleColumnCenter btn btn-outline-danger" @onclick="() => IntervalSet.Pause()">
                    <span class="oi oi-media-pause m-2 pointer" aria-hidden="true"></span>
                </button>
            }
        }
        else
        {
            <h2 class="@singleColumnCenter">@IntervalSet.TotalTime</h2>

            <button type="button" class="@singleColumnCenter btn btn-outline-primary" @onclick="async() => await Start()">
                <span class="oi oi-media-play m-2 pointer" aria-hidden="true"></span>
            </button>
        }

        @if (_preloadedIntervalSets.Any(intervalSet => intervalSet.Name == IntervalSet.Name))
        {
            <div class="@singleColumnCenter">
                <a href="@IntervalSet.GuideUrl" target="_blank">Guide</a>
            </div>
        }

        @if (playSound)
        {
            <audio hidden loop autoplay>
                <source src="sounds/ding.wav" />
            </audio>
        }
    </div>
}

@code {

    [Parameter]
    public IntervalSet IntervalSet { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    private bool _isLoading = true;
    bool playSound = false;
    string singleColumnCenter = "col-12 text-center d-flex justify-content-center my-3";
    HowlerJsAudioPlayerInterop HowlerJsAudioPlayerInterop = new HowlerJsAudioPlayerInterop();
    protected List<PlaylistItem> Playlist = new List<PlaylistItem>();
    protected Dictionary<string, int> IntervalNameTrackIds = new();
    private List<IntervalSet> _preloadedIntervalSets = new List<IntervalSet>();
    private string _currentAudioDuration = string.Empty;
    private const string NextUp = "Next Up";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isLoading = true;
            // https://github.com/soend/BlazorAudioPlayer
            // https://stackoverflow.com/questions/64459271/how-can-you-play-a-recorded-audio-blob-on-the-client-side-using-howler-js
            byte[] nextUpAudioData = await SpeechToTextClient.GetSpeech(NextUp);
            string nextUpAudioUrl = $"data:audio/wav;base64,{Convert.ToBase64String(nextUpAudioData)}";
            Playlist.Add(new PlaylistItem(0, NextUp, nextUpAudioUrl));
            Playlist.Add(new PlaylistItem(1, "Ding", "/sounds/ding.wav"));

            int trackId = 2;

            foreach (var interval in IntervalSet.Intervals)
            {
                if (!IntervalNameTrackIds.Any(pair => pair.Key == interval.Name))
                {
                    byte[] audioData = await SpeechToTextClient.GetSpeech(interval.Name);
                    string audioUrl = $"data:audio/wav;base64,{Convert.ToBase64String(audioData)}";
                    Playlist.Add(new PlaylistItem(trackId, interval.Name, audioUrl));
                    IntervalNameTrackIds.Add(interval.Name, trackId);
                    trackId++;
                }
            }

            await HowlerJsAudioPlayerInterop.CreateAudioPlayer(JS, Playlist);
            _isLoading = false;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _preloadedIntervalSets = await PreloadedIntervalSetsClient.GetPreloadedIntervalSets();
        IntervalSet.OnSecondElapsed += IntervalSet_OnSecondElapsed;
        IntervalSet.OnStopped += IntervalSet_OnStopped;
        IntervalSet.OnFinished += IntervalSet_OnFinished;
        IntervalSet.OnCurrentIntervalStarted += IntervalSet_OnCurrentIntervalStarted;
    }

    private void IntervalSet_OnSecondElapsed(object sender, EventArgs e)
    {
        // Say "Next Up" the last 5 seconds of the inteval and then say the next interval name.
        if (IntervalSet.CurrentTimerLeft.TotalSeconds == 5 && !string.IsNullOrWhiteSpace(IntervalSet.NextIntervalName))
        {
            Task.Run(async () =>
            {
                _ = await HowlerJsAudioPlayerInterop.Play(JS, 0);
                await Task.Delay(1000);

                if (IntervalNameTrackIds.TryGetValue(IntervalSet.NextIntervalName, out int trackId))
                {
                    _ = await HowlerJsAudioPlayerInterop.Play(JS, trackId);
                }
            });
        }

        StateHasChanged();
    }

    private void IntervalSet_OnStopped(object sender, EventArgs e)
    {
        playSound = false;
    }

    private void IntervalSet_OnFinished(object sender, EventArgs e)
    {
        if (IntervalSet.IsTimerRunning)
        {
            //playSound = true;
            Task.Run(async () => await Ding());
            Task.Run(async () => await StopPlayingTheSoundInAMoment());
        }

        StateHasChanged();
    }

    private async Task StopPlayingTheSoundInAMoment()
    {
        await Task.Delay(TimeSpan.FromMinutes(1));

        if (playSound == true)
        {
            playSound = false;
            StateHasChanged();
        }
    }

    private void IntervalSet_OnCurrentIntervalStarted(object sender, EventArgs e)
    {
        Task.Run(() => SayIntervalName());
    }

    private async Task SayIntervalName()
    {
        if (IntervalNameTrackIds.TryGetValue(IntervalSet.CurrentIntervalName, out int trackId))
        {
            _ = await HowlerJsAudioPlayerInterop.Play(JS, trackId);
        }
    }

    private async Task Ding()
    {
         _ = await HowlerJsAudioPlayerInterop.Play(JS, 1);
    }

    private async Task Close()
    {
        await Stop();
        await OnClose.InvokeAsync(true);
    }

    private async Task Start()
    {
        await NoSleep.Enable(JS);
        IntervalSet.Start();
    }

    private async Task Stop()
    {
        if (!string.IsNullOrWhiteSpace(IntervalSet?.CurrentIntervalName) && IntervalNameTrackIds.TryGetValue(IntervalSet.CurrentIntervalName, out int trackId))
        {
            await HowlerJsAudioPlayerInterop.Stop(JS, trackId);
        }

        await NoSleep.Disable(JS);
        IntervalSet.Stop();
    }
}
