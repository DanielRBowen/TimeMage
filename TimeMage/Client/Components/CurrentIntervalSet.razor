@inject IJSRuntime JS
@inject SpeechToTextClient SpeechToTextClient
<button type="button" class="btn btn-outline-primary" @onclick="() => OnClose.InvokeAsync(true)">Close</button>

<div class="text-center justify-content-center">
    <div class="row"><div class="col-12">@IntervalSet.Name</div></div>

    @if (IntervalSet.IsTimerRunning)
    {

        <div class="@singleColumnCenter">Time: @IntervalSet.TotalTimeLeft</div>

        <div class="@singleColumnCenter">Current Interval: @IntervalSet.CurrentIntervalName</div>

        <div class="@singleColumnCenter">Interval Time Left: @IntervalSet.CurrentTimerLeft</div>

        <button type="button" class="@singleColumnCenter btn btn-outline-danger" @onclick="() => IntervalSet.Stop()">
            <span class="oi oi-media-stop m-2 pointer" aria-hidden="true"></span>
        </button>
    }
    else
    {
        <div class="@singleColumnCenter">@IntervalSet.TotalTime</div>

        <button type="button" class="@singleColumnCenter btn btn-outline-primary" @onclick="() => IntervalSet.Start()">
            <span class="oi oi-media-play m-2 pointer" aria-hidden="true"></span>
        </button>
    }

    @if (IntervalSet.Name == "Fat Burn")
    {
        <div class="@singleColumnCenter">
            <a href="https://youtu.be/9boaIRTLnns" target="_blank">How to do the fat burn workout?</a>
        </div>
    }

    @if (playSound)
    {
        <audio hidden loop autoplay>
            <source src="sounds/ding.wav" />
        </audio>
    }
</div>

@code {

    [Parameter]
    public IntervalSet IntervalSet { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    bool playSound = false;
    string singleColumnCenter = "col-12 text-center d-flex justify-content-center my-3";

    protected override void OnInitialized()
    {
        IntervalSet.OnSecondElapsed += IntervalSet_OnSecondElapsed;
        IntervalSet.OnStopped += IntervalSet_OnStopped;
        IntervalSet.OnFinished += IntervalSet_OnFinished;
        IntervalSet.OnCurrentIntervalStarted += IntervalSet_OnCurrentIntervalStarted;
    }

    private void IntervalSet_OnSecondElapsed(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private void IntervalSet_OnStopped(object sender, EventArgs e)
    {
        playSound = false;
    }

    private void IntervalSet_OnFinished(object sender, EventArgs e)
    {
        if (IntervalSet.IsTimerRunning)
        {
            playSound = true;
            Task.Run(() => StopPlayingTheSoundInAMoment());
        }

        StateHasChanged();
    }

    private async Task StopPlayingTheSoundInAMoment()
    {
        await Task.Delay(TimeSpan.FromMinutes(1));

        if (playSound == true)
        {
            playSound = false;
            StateHasChanged();
        }
    }

    private void IntervalSet_OnCurrentIntervalStarted(object sender, EventArgs e)
    {
        Task.Run(() => SayIntervalName());
    }

    private async Task SayIntervalName()
    {
        byte[] audioData = await SpeechToTextClient.GetSpeech(IntervalSet.CurrentIntervalName);

        if (audioData != null)
        {
            await Audio.Play(JS, audioData);
            StateHasChanged();
        }
    }
}
