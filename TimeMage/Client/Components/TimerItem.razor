<tr>
    @if (IsEditing && _isTimerRunning == false)
    {
        <td>
            <span class="oi oi-document" aria-hidden="true" @onclick="() => OnDuplicate.InvokeAsync(Timer)"></span>
        </td>
        <td>
            <span class="oi oi-trash" aria-hidden="true" @onclick="() => OnDelete.InvokeAsync(Timer)"></span>
        </td>
        <td>
            <input type="text" class="form-control" aria-label="Name" @bind-value="Timer.Name" placeholder="Name">
            <input type="text" class="form-control" aria-label="Time" @bind-value="Timer.Time">
        </td>
    }
    else
    {
        <td>
            <h5>@Timer.Name</h5>
            @if (_isTimerRunning)
            {
                <h2>@_timeLeft</h2>
            }
            else
            {
                <h2>@Timer.Time</h2>
            }
            @if (playSound)
            {
                <audio hidden loop autoplay>
                    <source src="sounds/ding.wav" />
                </audio>
            }
        </td>
    }
    <td>
        @if (IsEditing)
        {
            <span>&nbsp;</span>
        }
        else
        {
            @if (_isTimerRunning)
            {
                <span class="oi oi-media-stop m-2" aria-hidden="true" @onclick="StopTimer"></span>
            }
            else
            {
                <span class="oi oi-media-play m-2" aria-hidden="true" @onclick="StartTimer"></span>
            }
        }
    </td>
</tr>

@code {
    bool playSound = false;
    private bool _isTimerRunning = false;
    private TimeSpan _timeLeft = new TimeSpan(0, 0, 15);
    [Parameter]
    public TmTimer Timer { get; set; }
    [Parameter]
    public bool IsEditing { get; set; } = false;
    [Parameter]
    public EventCallback<TmTimer> OnDelete { get; set; }
    [Parameter]
    public EventCallback<TmTimer> OnDuplicate { get; set; }

    public void StartTimer()
    {
        Task.Run(() => RunTimer());
    }

    async Task RunTimer()
    {
        if (Timer.Time.TotalSeconds <= 0)
        {
            return;
        }

        _timeLeft = Timer.Time;
        _isTimerRunning = true;
        while (_timeLeft > new TimeSpan() && _isTimerRunning == true)
        {
            await Task.Delay(1000);
            _timeLeft = _timeLeft.Subtract(new TimeSpan(0, 0, 1));
            StateHasChanged();
        }
        await AfterTime();
        StateHasChanged();
    }

    public void StopTimer()
    {
        _isTimerRunning = false;
        playSound = false;
    }

    Task AfterTime()
    {
        if (_isTimerRunning)
        {
            playSound = true;
        }
        else
        {

        }

        return Task.CompletedTask;
    }
}