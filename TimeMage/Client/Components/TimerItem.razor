<div class="row my-3">
    @if (IsEditing && Timer.IsTimerRunning == false)
    {
        <div class="col-1">
            <button type="button" class="btn btn-outline-success" @onclick="() => OnDuplicate.InvokeAsync(Timer)"><span class="oi oi-document" aria-hidden="true"></span></button>
        </div>
        <div class="col-1">
            <button type="button" class="btn btn-outline-danger" @onclick="() => OnDelete.InvokeAsync(Timer)"><span class="oi oi-trash" aria-hidden="true"></span></button>
        </div>
        <div class="col-9" @onclick="EditTimer">
            <div class="row">@Timer.Name</div>
            <div class="row">@Timer.Time</div>
        </div>
    }
    else
    {
        <div class="col-9">
            <h5>@Timer.Name</h5>
            @if (Timer.IsTimerRunning)
            {
                <h2>@Timer.TimeLeft</h2>
            }
            else
            {
                <h2>@Timer.Time</h2>
            }
            @if (playSound)
            {
                <audio hidden loop autoplay>
                    <source src="sounds/ding.wav" />
                </audio>
            }
        </div>
    }
    <div class="col-1">
        @if (IsEditing)
        {
            <span>&nbsp;</span>
        }
        else
        {
            @if (Timer.IsTimerRunning)
            {
                <button type="button" class="btn btn-outline-danger" @onclick="() => Timer.Stop()">
                    <span class="oi oi-media-stop m-2 pointer" aria-hidden="true"></span>
                </button>
            }
            else
            {
                <div type="button" class="btn btn-outline-primary" @onclick="() => Start()">
                    <span class="oi oi-media-play m-2 pointer" aria-hidden="true"></span>
                </div>
            }
        }
    </div>
</div>

<BSModal @ref="_editTimerModal">
    <BSModalBody Class="container">
        <form>
            <div class="form-group">
                <input type="text" class="form-control" aria-label="Name" @bind-value="Timer.Name" placeholder="Name" maxlength="34">
                <TimeMageTimeSelector @bind-SelectedTime="Timer.Time"></TimeMageTimeSelector>
			</div>
		</form>

	</BSModalBody>
    <BSModalFooter>
        <BSButton Color="Color.Light" @onclick="() => _editTimerModal.Hide()">Done</BSButton>
	</BSModalFooter>
</BSModal>

@code {
    bool playSound = false;
    [Parameter]
    public TmTimer Timer { get; set; }
    [Parameter]
    public bool IsEditing { get; set; } = false;
    [Parameter]
    public EventCallback<TmTimer> OnDelete { get; set; }
    [Parameter]
    public EventCallback<TmTimer> OnDuplicate { get; set; }

    private BSModal _editTimerModal;

    public void EditTimer()
    {
        _editTimerModal.Show();
    }

    protected override void OnInitialized()
    {
        Timer.OnSecondElapsed += Timer_OnSecondElapsed;
        Timer.OnStopped += Timer_OnStopped;
        Timer.OnFinished += Timer_OnFinished;
    }

    private void Start()
    {
        Timer.Start();
    }

    private void Timer_OnSecondElapsed(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private void Timer_OnStopped(object sender, EventArgs e)
    {
        playSound = false;
    }

    private void Timer_OnFinished(object sender, EventArgs e)
    {
        if (Timer.IsTimerStopping == false)
        {
            playSound = true;
            Task.Run(() => StopPlayingTheSoundInAMoment());
        }

        StateHasChanged();
    }

    private async Task StopPlayingTheSoundInAMoment()
    {
        await Task.Delay(TimeSpan.FromMinutes(1));

        if (playSound == true)
        {
            playSound = false;
            StateHasChanged();
        }
    }
}