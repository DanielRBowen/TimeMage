<tr>
    @if (IsEditing && Timer.IsTimerRunning == false)
    {
        <td>
            <span class="oi oi-document pointer" aria-hidden="true" @onclick="() => OnDuplicate.InvokeAsync(Timer)"></span>
        </td>
        <td>
            <span class="oi oi-trash pointer" aria-hidden="true" @onclick="() => OnDelete.InvokeAsync(Timer)"></span>
        </td>
        <td>
            <input type="text" class="form-control" aria-label="Name" @bind-value="Timer.Name" placeholder="Name">
            <input type="text" class="form-control" aria-label="Time" @bind-value="Timer.Time">
        </td>
    }
    else
    {
        <td>
            <h5>@Timer.Name</h5>
            @if (Timer.IsTimerRunning)
            {
                <h2>@Timer.TimeLeft</h2>
            }
            else
            {
                <h2>@Timer.Time</h2>
            }
            @if (playSound)
            {
                <audio hidden loop autoplay>
                    <source src="sounds/ding.wav" />
                </audio>
            }
        </td>
    }
    <td>
        @if (IsEditing)
        {
            <span>&nbsp;</span>
        }
        else
        {
            @if (Timer.IsTimerRunning)
            {
                <span class="oi oi-media-stop m-2 pointer" aria-hidden="true" @onclick="() => Timer.Stop()"></span>
            }
            else
            {
                <span class="oi oi-media-play m-2 pointer" aria-hidden="true" @onclick="() => Timer.Start()"></span>
            }
        }
    </td>
</tr>

@code {
    bool playSound = false;
    [Parameter]
    public TmTimer Timer { get; set; }
    [Parameter]
    public bool IsEditing { get; set; } = false;
    [Parameter]
    public EventCallback<TmTimer> OnDelete { get; set; }
    [Parameter]
    public EventCallback<TmTimer> OnDuplicate { get; set; }

    protected override void OnInitialized()
    {
        Timer.OnSecondElapsed += Timer_OnSecondElapsed;
        Timer.OnStopped += Timer_OnStopped;
        Timer.OnFinished += Timer_OnFinished;
    }

    private void Timer_OnSecondElapsed(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private void Timer_OnStopped(object sender, EventArgs e)
    {
        playSound = false;
    }

    private void Timer_OnFinished(object sender, EventArgs e)
    {
        if (Timer.IsTimerRunning)
        {
            playSound = true;
        }

        StateHasChanged();
    }
}